/*!
 * ActiveWrappers v1.0.3
 *
 * Copyright (c) 2014, Roman Gemini <roman@homefs.biz>
 * Licensed under the Apache v2 License.
 *
 */
;
"use strict";
var EventHolderHelper = {buildEventHolder: function (b) {
    var a = {};
    b.forEach(function (c) {
        a[c] = []
    });
    return a
}, eventType: {ADD: 1, REMOVE: 1 << 1, UPDATE: 1 << 2, CLEAR: 1 << 3, SWAP: 1 << 4, MOVE: 1 << 5, SET: 1 << 6, ANY: 255}, mergeObjects: function (d, a) {
    var c = d;
    for (var b in a) {
        c[b] = a[b]
    }
    return c
}};
var ActiveWrapper = (function () {
    var a;
    a = function () {
    };
    a.prototype = {on: function (c, d, b) {
        this.eventHolder.bind(c, d, b);
        return this
    }, unbind: function (b) {
        this.eventHolder.unbind(b);
        return this
    }};
    return a
}());
var EventHolder = (function () {
    var a;
    a = function (b) {
        if (!(this instanceof a)) {
            throw new Error("Use 'new' operator")
        }
        this.eventPattern = b;
        this.init()
    };
    a.prototype = EventHolderHelper.mergeObjects(new ActiveWrapper, {bind: function (c, d, b) {
        this.test(c);
        b = b || EventHolderHelper.eventType.ANY;
        this.eventHolderMap[c].push({f: b, c: d})
    }, unbind: function (b) {
        this.test(b);
        if ("undefined" == typeof b) {
            this.init()
        } else {
            this.eventHolderMap[b] = []
        }
    }, init: function () {
        this.eventHolderMap = EventHolderHelper.buildEventHolder(this.eventPattern)
    }, call: function (d, b, c) {
        this.test(d);
        var e = this.eventHolderMap[d];
        ("undefined" == typeof c ? e : e.filter(function (f) {
            return f.f & c
        })).forEach(function (f) {
            f.c.apply(null, b)
        })
    }, test: function (b) {
        if (this.eventHolderMap[b] === undefined) {
            throw new RangeError("Event '" + b + "' not exists!")
        }
    }});
    return a
}());
var ActiveObject = function (b) {
    var a;
    a = function (c) {
        if (!(this instanceof a)) {
            return new a(c)
        }
        this.eventHolder = new EventHolder(["remove", "clear", "set", "global"]);
        this.objectKeeper = "object" == typeof c ? c : {}
    };
    a.prototype = {onSet: function (c) {
        this.eventHolder.bind("set", c);
        return this
    }, onRemove: function (c) {
        this.eventHolder.bind("remove", c);
        return this
    }, onClear: function (c) {
        this.eventHolder.bind("clear", c);
        return this
    }, onGlobal: function (d, c) {
        this.eventHolder.bind("global", d, c);
        return this
    }, set: function (d, e) {
        var c = this.objectKeeper[d];
        this.objectKeeper[d] = e;
        this.eventHolder.call("set", [d, e, c]);
        this.eventHolder.call("global", [EventHolderHelper.eventType.SET, [d, e, c]], EventHolderHelper.eventType.SET);
        return this
    }, remove: function (c) {
        if (typeof this.objectKeeper[c] !== "undefined") {
            delete this.objectKeeper[c];
            this.eventHolder.call("remove", [c]);
            this.eventHolder.call("global", [EventHolderHelper.eventType.REMOVE, [c]], EventHolderHelper.eventType.REMOVE)
        }
        return this
    }, clear: function () {
        this.objectKeeper = {};
        this.eventHolder.call("clear", []);
        this.eventHolder.call("global", [EventHolderHelper.eventType.CLEAR], EventHolderHelper.eventType.CLEAR)
    }, get: function (c) {
        return this.objectKeeper[c]
    }, getKeys: function () {
        var d = [];
        for (var c in this.objectKeeper) {
            d.push(c)
        }
        return d
    }, getObject: function () {
        return this.objectKeeper
    }, each: function (d) {
        var c = this;
        this.getKeys().forEach(function (e) {
            d.apply(null, [e, c.get(e)])
        })
    }, count: function () {
        return this.getKeys().length
    }};
    return a
};
var ActiveArray = (function () {
    var a;
    a = function (b) {
        if (!(this instanceof a)) {
            return new a(b)
        }
        this.eventHolder = new EventHolder(["add", "update", "remove", "clear", "swap", "move", "global"]);
        this.arrayKeeper = "array" == typeof b ? b : []
    };
    a.prototype = EventHolderHelper.mergeObjects(new ActiveWrapper(), {onAdd: function (b) {
        this.eventHolder.bind("add", b);
        return this
    }, onUpdate: function (b) {
        this.eventHolder.bind("update", b);
        return this
    }, onRemove: function (b) {
        this.eventHolder.bind("remove", b);
        return this
    }, onClear: function (b) {
        this.eventHolder.bind("clear", b);
        return this
    }, onSwap: function (b) {
        this.eventHolder.bind("swap", b);
        return this
    }, onMove: function (b) {
        this.eventHolder.bind("move", b);
        return this
    }, onGlobal: function (c, b) {
        this.eventHolder.bind("global", c, b);
        return this
    }, add: function (b) {
        this.arrayKeeper.push(b);
        this.eventHolder.call("add", [b]);
        this.eventHolder.call("global", [EventHolderHelper.eventType.ADD, [b]], EventHolderHelper.eventType.ADD);
        return this
    }, addAll: function (b) {
        var c;
        for (c = 0; c < b.length; c += 1) {
            this.arrayKeeper.push(b[c])
        }
        this.eventHolder.call("add", [b]);
        this.eventHolder.call("global", [EventHolderHelper.eventType.ADD, [b]], EventHolderHelper.eventType.ADD);
        return this
    }, addEvery: function (b) {
        var c;
        for (c = 0; c < b.length; c += 1) {
            this.add(b[c])
        }
        return this
    }, remove: function (b) {
        if (typeof this.arrayKeeper[b] == "undefined") {
            throw new RangeError("Index out of bounds")
        }
        this.arrayKeeper.splice(b, 1);
        this.eventHolder.call("remove", [b]);
        this.eventHolder.call("global", [EventHolderHelper.eventType.REMOVE, [b]], EventHolderHelper.eventType.REMOVE);
        return this
    }, update: function (c, d) {
        if (typeof this.arrayKeeper[c] == "undefined") {
            throw new RangeError("Index out of bounds")
        }
        var b = this.arrayKeeper[c];
        this.arrayKeeper[c] = d;
        this.eventHolder.call("update", [d, b]);
        this.eventHolder.call("global", [EventHolderHelper.eventType.UPDATE, [d, b]], EventHolderHelper.eventType.UPDATE);
        return this
    }, swap: function (d, c) {
        if (typeof this.arrayKeeper[d] == "undefined" || typeof this.arrayKeeper[c] == "undefined") {
            throw new RangeError("Index out of bounds")
        }
        var b = this.arrayKeeper[d];
        this.arrayKeeper[d] = this.arrayKeeper[c];
        this.arrayKeeper[c] = b;
        this.eventHolder.call("swap", [d, c]);
        this.eventHolder.call("global", [EventHolderHelper.eventType.SWAP, [d, c]], EventHolderHelper.eventType.SWAP);
        return this
    }, move: function (e, d) {
        if (typeof this.arrayKeeper[e] == "undefined" || typeof this.arrayKeeper[d] == "undefined") {
            throw new RangeError("Index out of bounds")
        }
        var b = this.arrayKeeper[e], c = e;
        if (d < e) {
            for (; c > d; c -= 1) {
                this.arrayKeeper[c] = this.arrayKeeper[c - 1]
            }
        } else {
            for (; c < d; c += 1) {
                this.arrayKeeper[c] = this.arrayKeeper[c + 1]
            }
        }
        this.arrayKeeper[d] = b;
        this.eventHolder.call("move", [e, d]);
        this.eventHolder.call("global", [EventHolderHelper.eventType.MOVE, [e, d]], EventHolderHelper.eventType.MOVE);
        return this
    }, clear: function () {
        this.arrayKeeper = [];
        this.eventHolder.call("clear", []);
        this.eventHolder.call("global", [EventHolderHelper.eventType.CLEAR], EventHolderHelper.eventType.CLEAR);
        return this
    }, get: function (b) {
        if (typeof this.arrayKeeper[b] == "undefined") {
            throw new RangeError("Index out of bounds")
        }
        return this.arrayKeeper[b]
    }, each: function (c) {
        var b;
        for (b = 0; b < this.arrayKeeper.length; b += 1) {
            c(this.arrayKeeper[b])
        }
    }, count: function () {
        return this.arrayKeeper.length
    }, toString: function () {
        var b = "array[", c;
        for (c = 0; c < this.arrayKeeper.length; c += 1) {
            b += this.arrayKeeper[c].toString()
        }
        return b + "]"
    }});
    return a
}());
var ActiveVariable = (function () {
    var a;
    a = function (b) {
        if (!(this instanceof a)) {
            return new a(b)
        }
        this.eventHolder = new EventHolder(["set"]);
        this.variableKeeper = b
    };
    a.prototype = EventHolderHelper.mergeObjects(new ActiveWrapper, {onSet: function (b) {
        this.eventHolder.bind("set", b);
        return this
    }, set: function (c) {
        var b = this.variableKeeper;
        this.variableKeeper = c;
        this.eventHolder.call("set", [c, b]);
        return this
    }, get: function () {
        return variableKeeper
    }, toString: function () {
        return this.variableKeeper.toString()
    }});
    return a
}());