package gemini.myownradio.engine.buffer;import com.sun.istack.internal.NotNull;import gemini.myownradio.tools.ByteTools;import java.io.IOException;import java.io.InputStream;import java.nio.ByteBuffer;/** * Created by Roman on 02.10.14. * * InputStream layer for radio clients */public class ConcurrentBufferInput extends InputStream {    final private ConcurrentBufferUnit bufferUnit;    private long pos;    public ConcurrentBufferInput(ConcurrentBufferUnit bufferUnit) {        this.bufferUnit = bufferUnit;        this.pos = 0;    }    @Override    public int read() throws IOException {        byte[] tmp = new byte[1];        int len = this.read(tmp, 0, tmp.length);        if (len == 1) {            return (int) tmp[0];        } else {            return -1;        }    }    @Override    public int read(byte[] b) throws IOException {        return this.read(b, 0, b.length);    }    @Override    public int read(byte[] b, int off, int len) throws IOException {        if (len > bufferUnit.getBufferSize() || off < 0 || off > b.length || off + len > b.length) {            throw new IndexOutOfBoundsException();        }        try {            byte[] tmpBuffer;            long tmpCursor;            long timeout = System.currentTimeMillis() + 10_000L;            while (timeout > System.currentTimeMillis()) {                tmpBuffer = bufferUnit.getByteBuffer();                tmpCursor = ByteTools.bytesToLong(tmpBuffer, 0, Long.BYTES);                int realDelta = (int) (tmpCursor - this.pos);                if (realDelta == 0) {                    synchronized (bufferUnit) {                        bufferUnit.wait(5_000L);                    }                } else {                    if (realDelta > bufferUnit.getBufferSize()) {                        this.pos = tmpCursor - bufferUnit.getBufferSize();                        realDelta = bufferUnit.getBufferSize();                    }                    if (realDelta > len) {                        this.pos += len;                        System.arraycopy(tmpBuffer, Long.BYTES + bufferUnit.getBufferSize() - realDelta, b, off, len);                        return len;                    } else {                        this.pos += realDelta;                        System.arraycopy(tmpBuffer, Long.BYTES + bufferUnit.getBufferSize() - realDelta, b, off, realDelta);                        return realDelta;                    }                }            }        } catch (InterruptedException e) {            throw new IOException("Interrupted Exception");        }        return 0;    }}