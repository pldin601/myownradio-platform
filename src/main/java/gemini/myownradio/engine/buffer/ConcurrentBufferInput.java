package gemini.myownradio.engine.buffer;import java.io.IOException;import java.io.InputStream;import java.nio.ByteBuffer;/** * Created by Roman on 02.10.14. */public class ConcurrentBufferInput extends InputStream {    private ConcurrentBufferMemory bu;    private     long            pos;    public ConcurrentBufferInput(ConcurrentBufferCreator me) {        this.bu = me.getBufferUnit();        this.pos = 0;    }    @Override    public int read() throws IOException {        byte[] tmp = new byte[1];        int len = this.read(tmp, 0, tmp.length);        if (len == 1) {            return (int) tmp[0];        } else {            return -1;        }    }    @Override    public int read(byte[] b) throws IOException {        return this.read(b, 0, b.length);    }    @Override    public int read(byte[] b, int off, int len) throws IOException {        if (len > bu.getBufferSize() || off < 0 || off > b.length || off + len > b.length) {            throw new IndexOutOfBoundsException();        }        try {            byte[] tmpBuffer = new byte[bu.getBufferSize()];            long tmpCursor;            long timeout = System.currentTimeMillis() + 10_000L;            ByteBuffer byteBuffer;            while (timeout > System.currentTimeMillis()) {                byteBuffer = ByteBuffer.wrap(bu.getByteBuffer());                tmpCursor = byteBuffer.getLong();                byteBuffer.get(tmpBuffer);                int realDelta = (int) (tmpCursor - this.pos);                if (realDelta == 0) {                    synchronized (bu) {                        bu.wait(5000);                    }                } else {                    if (realDelta > bu.getBufferSize()) {                        this.pos = tmpCursor - bu.getBufferSize();                        realDelta = bu.getBufferSize();                    }                    if (realDelta > len) {                        this.pos += len;                        System.arraycopy(tmpBuffer, bu.getBufferSize() - realDelta, b, off, len);                        return len;                    } else {                        this.pos += realDelta;                        System.arraycopy(tmpBuffer, bu.getBufferSize() - realDelta, b, off, realDelta);                        return realDelta;                    }                }            }        } catch(InterruptedException e) {            throw new IOException("Interrupted Exception");        }        throw new IOException("No streamer activity");    }}