package gemini.myownradio.engine;import gemini.myownradio.engine.buffer.ConcurrentBuffer;import gemini.myownradio.engine.entity.Stream;import gemini.myownradio.ff.FFEncoderBuilder;import gemini.myownradio.light.LHttpProtocol;import gemini.myownradio.tools.io.IcyOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.sql.SQLException;/** * Created by Roman on 02.10.14. */public class ListenRadio {    LHttpProtocol exchange;    IcyOutputStream os;    OutputStream sw;    ConcurrentBuffer broadcast;    boolean icy;    Stream object;    FFEncoderBuilder decoder;    public ListenRadio(LHttpProtocol exchange, boolean icy, ConcurrentBuffer broadcast, FFEncoderBuilder decoder, Stream streamObject)            throws IOException {        this.broadcast = broadcast;        this.icy = icy;        this.object = streamObject;        this.decoder = decoder;        this.exchange = exchange;    }    public void listen() throws IOException, SQLException {        exchange.setContentType(decoder.getAudioFormat().getContent());        if (icy) {            exchange.setHeader("icy-metadata", "1");            exchange.setHeader("icy-name", object.getName() + " @ " + (broadcast.getStreamKey().getBitrate() / 1000) + "K");            exchange.setHeader("icy-metaint", Integer.toString(IcyOutputStream.DEFAULT_METAINT));            os = new IcyOutputStream(exchange.getOutputStream());            os.setTitle(object.getName());            sw = os;        } else {            sw = exchange.getOutputStream();        }        int len;        byte[] buff = new byte[4096];        String prev = "";        FlowListener client = new FlowListener(exchange.getClientIP(),                exchange.getHeader("User-Agent"), decoder.getAudioFormatName(), object.getId());        try (InputStream is = broadcast.getInputStream()) {            while ((len = is.read(buff)) != 0) {                if (icy && !prev.equals(broadcast.getTitle())) {                    prev = broadcast.getTitle();                    os.setTitle(prev);                }                sw.write(buff, 0, len);            }        } finally {            client.finish();        }    }}